/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/Texts.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/TypedText.hpp>
#include <texts/TypedTextDatabase.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <touchgfx/TextProvider.hpp>

touchgfx::Font::StringWidthFunctionPointer touchgfx::Font::getStringWidthFunction = &touchgfx::Font::getStringWidthLTR;
touchgfx::LCD::DrawStringFunctionPointer touchgfx::LCD::drawStringFunction = &touchgfx::LCD::drawStringLTR;
touchgfx::TextProvider::UnicodeConverterInitFunctionPointer touchgfx::TextProvider::unicodeConverterInitFunction = static_cast<touchgfx::TextProvider::UnicodeConverterInitFunctionPointer>(0);
touchgfx::TextProvider::UnicodeConverterFunctionPointer touchgfx::TextProvider::unicodeConverterFunction = static_cast<touchgfx::TextProvider::UnicodeConverterFunctionPointer>(0);

//Default typed text database
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE =
{
    0x52, 0x50, 0x43, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x52, 0x65, 0x76, 0x20, 0x30, 0x2e, 0x31, 0x0, // @0 "RPC Test Rev 0.1"
    0xc9c1, 0xb958, 0xc804, 0xc6d0, 0xbd84, 0xbc30, 0x23, 0x33, 0x0, // @17 "??????#3"
    0xbcf4, 0xc815, 0xbd84, 0xbc30, 0xacb0, 0xd569, 0x23, 0x33, 0x0, // @26 "??????#3"
    0xc9c1, 0xb958, 0xc804, 0xc6d0, 0xbd84, 0xbc30, 0x23, 0x32, 0x0, // @35 "??????#2"
    0xc9c1, 0xb958, 0xc804, 0xc6d0, 0xbd84, 0xbc30, 0x23, 0x34, 0x0, // @44 "??????#4"
    0xc9c1, 0xb958, 0xc804, 0xc6d0, 0xbd84, 0xbc30, 0x23, 0x31, 0x0, // @53 "??????#1"
    0xbcf4, 0xc815, 0xbd84, 0xbc30, 0xacb0, 0xd569, 0x23, 0x34, 0x0, // @62 "??????#4"
    0xbcf4, 0xc815, 0xbd84, 0xbc30, 0xacb0, 0xd569, 0x23, 0x32, 0x0, // @71 "??????#2"
    0xbcf4, 0xc815, 0xbd84, 0xbc30, 0xacb0, 0xd569, 0x23, 0x31, 0x0, // @80 "??????#1"
    0xb514, 0xc9c0, 0xd138, 0xbe54, 0xd615, 0xc131, 0xae30, 0x0, // @89 "???????"
    0xc99d, 0xd3ed, 0xbd84, 0xbc30, 0xae30, 0x23, 0x34, 0x0, // @97 "?????#4"
    0xc99d, 0xd3ed, 0xbd84, 0xbc30, 0xae30, 0x23, 0x33, 0x0, // @105 "?????#3"
    0xbc30, 0xc5f4, 0xc548, 0xd14c, 0xb098, 0x23, 0x31, 0x0, // @113 "?????#1"
    0xbc30, 0xc5f4, 0xc548, 0xd14c, 0xb098, 0x23, 0x32, 0x0, // @121 "?????#2"
    0xbc30, 0xc5f4, 0xc548, 0xd14c, 0xb098, 0x23, 0x33, 0x0, // @129 "?????#3"
    0xc99d, 0xd3ed, 0xbd84, 0xbc30, 0xae30, 0x23, 0x32, 0x0, // @137 "?????#2"
    0xc13c, 0xc11c, 0xc81c, 0xc2b5, 0xc870, 0xb9bd, 0xccb4, 0x0, // @145 "???????"
    0xc99d, 0xd3ed, 0xbd84, 0xbc30, 0xae30, 0x23, 0x31, 0x0, // @153 "?????#1"
    0xc801, 0xc544, 0xc2dd, 0xbcc4, 0xc548, 0xd14c, 0xb098, 0x0, // @161 "???????"
    0xad50, 0xb958, 0xc804, 0xc6d0, 0xbd84, 0xbc30, 0xae30, 0x0, // @169 "???????"
    0xbc30, 0xc5f4, 0xc548, 0xd14c, 0xb098, 0x23, 0x34, 0x0, // @177 "?????#4"
    0x2, 0x0, // @185 "<>"
    0xc548, 0xd14c, 0xb098, 0xc81c, 0xc5b4, 0xae30, 0x0, // @187 "??????"
    0xb808, 0xc774, 0xb2e4, 0xd1b5, 0xc81c, 0xae30, 0x0, // @194 "??????"
    0xacf5, 0xc870, 0xc7a5, 0xce58, 0x23, 0x31, 0x0, // @201 "????#1"
    0xacf5, 0xc870, 0xc7a5, 0xce58, 0x23, 0x32, 0x0, // @208 "????#2"
    0x53, 0x54, 0x41, 0x52, 0x54, 0x0, // @215 "START"
    0xc2e0, 0xd638, 0xbc1c, 0xc0dd, 0xae30, 0x0, // @221 "?????"
    0xc2e0, 0xd638, 0xcc98, 0xb9ac, 0xae30, 0x0, // @227 "?????"
    0xc2e0, 0xd638, 0xc218, 0xc2e0, 0xae30, 0x0 // @233 "?????"
};
extern uint32_t const indicesGb[];

//array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

//Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] =
{
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}

